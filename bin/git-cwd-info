#!/bin/bash

# Emits Git metadata for use in a Zsh prompt.
#
# Based on Geoffrey Grosenbach's modified version of:
#   https://github.com/benhoskings/dot-files/blob/master/files/bin/git_cwd_info
#
# Rewritten as shell script simply for speed

GIT_REPO_PATH=`git rev-parse --git-dir 2>/dev/null`

if [[ $GIT_REPO_PATH != '' && $GIT_REPO_PATH != '~' && $GIT_REPO_PATH != "$HOME/.git" ]]; then
  RED="%{[31m%}"
  GREEN="%{[32m%}"
  NO_COLOR="%{[0m%}"

  STATUS=`git status 2>/dev/null`
  STATE=" "

  #HELPERS
  NOTHING_TO_COMMIT="Initial commit"
  BEHIND="Your branch is behind"
  AHEAD="Your branch is ahead"
  UNTRACKED="Untracked files"
  DIVERGED="have diverged"
  CHANGED="Changed but not updated"
  TO_BE_COMMITED="Changes to be committed"
  CHANGES_NOT_STAGED="Changes not staged for commit"
	
  GIT_BRANCH=`git symbolic-ref -q HEAD | sed 's/refs\/heads\///'`
  #GIT_COMMIT_ID=`git rev-parse --short HEAD 2>/dev/null`

  # BIG IF
  if [ "$STATUS" != "" ]; then
    if [[ "$STATUS" =~ "$CHANGES_NOT_STAGED" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    elif [[ "$STATUS" =~ "$NOTHING_TO_COMMIT" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    elif [[ "$STATUS" =~ "$DIVERGED" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}â†•${NO_COLOR}"
    elif [[ "$STATUS" =~ "$BEHIND" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}â†“${NO_COLOR}"
    elif [[ "$STATUS" =~ "$AHEAD" ]]; then
      PROMPT_COLOR=$RED
      STATE="${STATE}${RED}â†‘${NO_COLOR}"
    elif [[ "$STATUS" =~ "$CHANGED" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    elif [[ "$STATUS" =~ "$TO_BE_COMMITED" ]]; then
      PROMPT_COLOR=$RED
      STATE=""
    else
      PROMPT_COLOR=$GREEN
      STATE=""
    fi

    if [[ "$STATUS" =~ "$UNTRACKED" ]]; then
      STATE="${STATE}${YELLOW}*${NO_COLOR}"
    fi

    PS1=" - ${RUBY_PROMPT}${YELLOW}\w${NO_COLOR} ( ${PROMPT_COLOR}${BRANCH}${NO_COLOR}${STATE}${NO_COLOR} )"
  else
    PS1=" - ${RUBY_PROMPT}${YELLOW}\w${NO_COLOR}"
  fi


  GIT_MODE=""
  if [[ -e "$GIT_REPO_PATH/BISECT_LOG" ]]; then
    GIT_MODE="+bisect"
  elif [[ -e "$GIT_REPO_PATH/MERGE_HEAD" ]]; then
    GIT_MODE="+merge"
  elif [[ -e "$GIT_REPO_PATH/rebase" || -e "$GIT_REPO_PATH/rebase-apply" || -e "$GIT_REPO_PATH/rebase-merge" || -e "$GIT_REPO_PATH/../.dotest" ]]; then
    GIT_MODE="+rebase"
  fi

  GIT_DIRTY=""
  if [[ "$GIT_REPO_PATH" != '.' && `git ls-files -m` != "" ]]; then
    GIT_DIRTY=" %{[90m%}âœ—%{[0m%}"
  fi

  #echo " %{[90m%}$GIT_BRANCH %{[37m%}$GIT_COMMIT_ID%{[0m%}$GIT_MODE$GIT_DIRTY"
  echo "($PROMPT_COLOR$GIT_BRANCH$GIT_MODE$STATE$NO_COLOR)"
fi
