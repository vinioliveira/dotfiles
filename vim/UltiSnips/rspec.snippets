snippet anr "and_raise" w
and_raise(${1:exception})
endsnippet

snippet anrb "and_return_block" w
and_return { $1 }
endsnippet

snippet andra "and_return_value" w
and_return(${1:value})
endsnippet

snippet ant "and_throw" w
and_throw(${1:sym})
endsnippet

snippet any "and_yield" w
and_yield(${1:values})
endsnippet

snippet annot "any_number_of_times" w
any_number_of_times
endsnippet

snippet atl "at_least" w
at_least(${1:n}).times
endsnippet

snippet atm "at_most" w
at_most(${1:n}).times
endsnippet

snippet cnf "configure"
RSpec.configure do |config|
  config.$0
end
endsnippet

snippet con "context"
context '${1:context}' do
  $0
end
endsnippet

snippet desc "controller_context"
require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe ${1:controller} do
  $0
end
endsnippet

snippet desrc "controller_context_RESTful"
describe ${1:controller}, '${2:GET|POST|PUT|DELETE} ${3:/some/path}${4: with some parameters}' do
  $0
end
endsnippet

snippet des "Describe"
describe '${1:subject}' do
  $0
end
endsnippet

snippet dest "Describe_type"
describe ${1:Type} do
  $0
end
endsnippet

snippet dests "Describe_type_string"
describe ${1:Type}, '${2:description}' do
  $0
end
endsnippet

snippet ex "exactly" w
exactly(${1:n}).times
endsnippet

# TODO: the middle tabstop on these next two should be $0, but UltiSnips
# doesn't handle this correctly yet
snippet its "it should"
it 'should ${1:do something}'${2: do
  $3
end}
endsnippet

snippet it "It"
it '${1:does something}'${2: do
  $3
end}
endsnippet

snippet matc "Matcher (Custom)"
class ${1:ReverseTo}
  def initialize($3)
    @$3 = $3
  end

  def matches?(actual)
    @actual = actual
    # Satisfy expectation here. Return false or raise an error if it's not met.
    ${0:@actual.reverse.should == @$3}
    true
  end

  def failure_message_for_should
    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn't"
  end

  def failure_message_for_should_not
    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"
  end
end

def ${2:reverse_to}(${3:expected})
  $1.new($3)
end
endsnippet

snippet mat "Matcher (DSL)"
RSpec::Matchers.define :${1:name} do |${2:expected}|
  match do |${3:actual}|
    $3.$1?($2)
  end
end

endsnippet

snippet moc "mock"
${1:var} = mock('${2:mock_name}'${3:, :null_object => true})
$0
endsnippet

snippet mm "mock_model"
mock_model(${1:model})$0
endsnippet

snippet mocw "mock_with"
RSpec::Runner.configure do |config|
        config.mock_with :${0:mocha|flexmock|rr}
end
endsnippet

snippet on "once" w
once
endsnippet

snippet reqs "Require spec_helper"
require 'spec_helper'


endsnippet

snippet shbs "response_should_be_success"
response.should be_success
$0
endsnippet

snippet shnbs "response_should_not_be_success"
response.should_not be_success
$0
endsnippet

snippet conn "Set Controller for Spec"
controller_name :${1:controller}
endsnippet

snippet bef "setup"
before(${1::each}) do
  $0
end
endsnippet

snippet exp "exp expect(${1}).to ${0}"
 expect(${1:object}).to ${0}
endsnippet

snippet stu "stub"
${1:double}.stub(:${2:message})$3
endsnippet

snippet aft "teardown"
after(${1::each}) do
  $0
end
endsnippet

snippet tw "twice" w
twice
endsnippet

snippet let "let"
let(:${1:symbol}) { $2 }
endsnippet

snippet letb "let block"
let :${1:symbol} do
  $2
end
$0
endsnippet

snippet subj "subject"
subject { $1 }
endsnippet

snippet exp "expect to"
expect do
  $1
end.to ${2:change {${3:subject}}.${4:from($5).to($6)}}
endsnippet

snippet rspec "RSpec spec"
require 'spec_helper'

describe ${1:Subject} do

end
endsnippet

snippet rmodel "RSpec model spec"
require 'spec_helper'

describe ${1:Model} do

  describe 'associations' do

  end

  describe 'validations' do

  end

  describe 'class methods' do

  end

  describe 'instance methods' do

  end
end
endsnippet

# vim:ft=rspec.ruby
